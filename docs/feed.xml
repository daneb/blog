<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://www.danebalia.com/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.danebalia.com/" rel="alternate" type="text/html" /><updated>2022-11-21T07:33:51+02:00</updated><id>https://www.danebalia.com/feed.xml</id><title type="html">Dane Balia</title><subtitle>This is my personal site, an expression of my learning, wisdom gained, experience and opinion.</subtitle><entry><title type="html">The Pursuit of the Right Culture</title><link href="https://www.danebalia.com/jekyll/leadership/management/2022/10/06/culture.html" rel="alternate" type="text/html" title="The Pursuit of the Right Culture" /><published>2022-10-06T23:59:22+02:00</published><updated>2022-10-06T23:59:22+02:00</updated><id>https://www.danebalia.com/jekyll/leadership/management/2022/10/06/culture</id><content type="html" xml:base="https://www.danebalia.com/jekyll/leadership/management/2022/10/06/culture.html">&lt;p&gt;&lt;img src=&quot;/images/direction.jpg&quot; alt=&quot;Direction&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve been in the game for a while, not too long but for a while. My pursuit through the years has been and still remains an organization with the ideal culture.&lt;/p&gt;

&lt;p&gt;By some of today’s standards, a good culture can almost be aligned with buzz words or things; awesome bling hardware, beer and pizza Fridays, team building, bonuses, reward points, remote work, trips to an island once a year to celebrate, we use agile or the latest tech. Wonderful but these are side-effects of a either a defined, undefined or inherited culture.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Culture&lt;/strong&gt; by definition is a set of shared attitudes, values, goals, and practices that characterizes an institution or organization.&lt;/p&gt;

&lt;p&gt;An organization is the sum of their intentional attitudes, values, goals and practices. If you want a great organization, with a great culture, then the equation you are trying to solve for is (or thereabout):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;my attitude,values,goals = companies attitude,values,goals&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;At various phases of our career, immaturity through to maturity - organization cultures will look different, some more attractive and some less, and that’s largely because the reference point is you and your maturity. Your attitude, your values and your goals when well aligned with that of the organizations will find root in effective and satisfying work, or at the very least tell you, that you need to grow.&lt;/p&gt;

&lt;h2 id=&quot;the-culture-test&quot;&gt;The Culture Test&lt;/h2&gt;

&lt;p&gt;Personally when I am surveying a company it doesn’t stop at the interview, it doesn’t stop when I sign the dotted line of my appointment, it’s during my first few months of hire. I like to intentionally push the boundaries of it’s leaders with care and kindness but very explicit intent. How do they think? How do they behave? I watch them. I study them. I listen to them. Does it align with the values espoused during the interview? Does it align with my own?&lt;/p&gt;

&lt;p&gt;One of the best reflections of leadership is NOT seen in the light, but is only reflected in the darkest of times, when it is tested. That’s the heart right. That’s the litmus test of stated culture. It doesn’t matter how amazing your localized team is, it’s the heads of the organization that define the ambience and the playing field. When times are dark - high stakes, high stress, downturn, mistakes or in failure, watch them, and &lt;strong&gt;learn&lt;/strong&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Culture is a way of coping with the world by defining it in detail.&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="jekyll" /><category term="leadership" /><category term="management" /><summary type="html"></summary></entry><entry><title type="html">Refocusing One-on-Ones</title><link href="https://www.danebalia.com/leadership/management/2022/09/05/refocusing-one-on-ones-copy.html" rel="alternate" type="text/html" title="Refocusing One-on-Ones" /><published>2022-09-05T07:22:22+02:00</published><updated>2022-09-05T07:22:22+02:00</updated><id>https://www.danebalia.com/leadership/management/2022/09/05/refocusing-one-on-ones%20copy</id><content type="html" xml:base="https://www.danebalia.com/leadership/management/2022/09/05/refocusing-one-on-ones-copy.html">&lt;p&gt;&lt;img src=&quot;/images/head-shot.jpg&quot; alt=&quot;Leadership&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;low-level-mechanics&quot;&gt;Low-level mechanics:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Apply active listening&lt;/strong&gt; - redirect from listening to the thoughts inside your own head to that of your team mate.  Examples:
    &lt;ol&gt;
      &lt;li&gt;Paraphrasing&lt;/li&gt;
      &lt;li&gt;Building trust&lt;/li&gt;
      &lt;li&gt;Non-verbal cues such as nodding, eye contact, leaning forward&lt;/li&gt;
      &lt;li&gt;Open-ended questions&lt;/li&gt;
      &lt;li&gt;Asking specific question to see clarification&lt;/li&gt;
      &lt;li&gt;Asking open-ended questions&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Record and track&lt;/strong&gt; - listen, make notes and track
    &lt;ol&gt;
      &lt;li&gt;Trello - I like to have a shared board where we can track items, highlight concerns and record wins&lt;/li&gt;
      &lt;li&gt;On the fly - in daily interactions when there’s a win, concern or something to follow up on, add it to the board&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Introspection and no deflection&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Ask the hard questions to get your team member to think about their actions, behaviour and growth. Often times, engineers optimize for delivery rather than introspection.&lt;/li&gt;
      &lt;li&gt;Don’t hold back on hard conversations or truth. Deal with things early and deal with them well.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Their time not yours&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Show up on time&lt;/li&gt;
      &lt;li&gt;Allow them to cancel and not you. But if there’s nothing to talk about, cancel.&lt;/li&gt;
      &lt;li&gt;Let them speak, not you&lt;/li&gt;
      &lt;li&gt;Avoid status updates.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Have a &lt;strong&gt;clear agenda&lt;/strong&gt; focused on:
    &lt;ol&gt;
      &lt;li&gt;Results&lt;/li&gt;
      &lt;li&gt;Career growth&lt;/li&gt;
      &lt;li&gt;Feedback&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make it actionable&lt;/strong&gt;. Take outcomes, conversations and discussions into actions.&lt;/li&gt;
  &lt;li&gt;Listen or probe for &lt;strong&gt;tension, friction or personal concerns&lt;/strong&gt; in their lives.
    &lt;ol&gt;
      &lt;li&gt;This creates a lens by which they operate&lt;/li&gt;
      &lt;li&gt;Perhaps even making ill-informed decisions&lt;/li&gt;
      &lt;li&gt;Or just having a different perspective for which impacts their motivation and drive&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Don’t solve their problems&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;You are not a clinical psychologist&lt;/li&gt;
      &lt;li&gt;Be very mindful about the advice you give&lt;/li&gt;
      &lt;li&gt;Collaborate to action, clarify to enable&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;tools-to-encourage-interaction&quot;&gt;Tools to encourage interaction:&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;ABC - The foundation of growth&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;You can use this diagram to generate conversation&lt;/li&gt;
      &lt;li&gt;Let the team member lead by completing the information&lt;/li&gt;
      &lt;li&gt;Revisit after analysis, time and reflection&lt;/li&gt;
      &lt;li&gt;Track&lt;/li&gt;
      &lt;li&gt;Build an action plan
 &lt;img src=&quot;/images/one-on-one.png&quot; alt=&quot;ABC&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Introspective questions&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;What’s on your mind this week?&lt;/li&gt;
      &lt;li&gt;How happy were you this past week?&lt;/li&gt;
      &lt;li&gt;How productive were you this past week?&lt;/li&gt;
      &lt;li&gt;What feedback do you have for me?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Team-related questions&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;What do you think of the teams morale?&lt;/li&gt;
      &lt;li&gt;How is your relationship with X?&lt;/li&gt;
      &lt;li&gt;Where do you think we could improve in our delivery?&lt;/li&gt;
      &lt;li&gt;How did you deal with a specific situation in which you were criticized by a senior?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Performance-related questions&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;What are some achievements you’re proud of since our last meeting?&lt;/li&gt;
      &lt;li&gt;What tasks have you found especially engaging or stimulating?&lt;/li&gt;
      &lt;li&gt;What do you think stands in the way of your progress?&lt;/li&gt;
      &lt;li&gt;What difficulties have you been facing recently?&lt;/li&gt;
      &lt;li&gt;What tasks do you find least engaging?&lt;/li&gt;
      &lt;li&gt;What kinds of projects are you interested in working on?&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Apply the &lt;strong&gt;Blake Mouton Model&lt;/strong&gt; as a leader
    &lt;ol&gt;
      &lt;li&gt;Impoverished manager - low regard for creating systems, low regard for results&lt;/li&gt;
      &lt;li&gt;Produce-or-Perish Management - high regard for results, and team secondary to productivity&lt;/li&gt;
      &lt;li&gt;Middle-of-the-road Management - tries to balance results and team motivation. Through continual compromise this will fail to inspire high performance&lt;/li&gt;
      &lt;li&gt;Team Management - most effective management style. Passionate about his work and does the best for his/her people.
 &lt;img src=&quot;/images/blake-mouton.png&quot; alt=&quot;BlakeMouton&quot; /&gt;&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Apply the &lt;strong&gt;Path-Goal Theory&lt;/strong&gt;
    &lt;ol&gt;
      &lt;li&gt;Helping them identify and achieve their goals.&lt;/li&gt;
      &lt;li&gt;Clearing away obstacles, thereby improving performance.&lt;/li&gt;
      &lt;li&gt;Offering appropriate rewards along the way.&lt;/li&gt;
      &lt;li&gt;Align path and goals with organizations principles and values.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;references&quot;&gt;References:&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://getlighthouse.com/blog/effective-one-on-one-meeting-tips/&quot;&gt;Effective One-on-Ones&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.thebalancecareers.com/active-listening-skills-with-examples-2059684&quot;&gt;Active Listening&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.radicalcandor.com/effective-one-on-ones/&quot;&gt;Radical Candor: One-on-Ones&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mindtools.com/pages/article/great-one-on-one.htm&quot;&gt;Mindtools&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://getlighthouse.com/blog/effective-1-on-1-meetings/&quot;&gt;Get LightHouse: One-on-ones&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="leadership" /><category term="management" /><summary type="html"></summary></entry><entry><title type="html">My Tips on Preparing for a Conference Talk</title><link href="https://www.danebalia.com/jekyll/presentation/hobbies/2022/06/19/tips-on-presenting.html" rel="alternate" type="text/html" title="My Tips on Preparing for a Conference Talk" /><published>2022-06-19T21:55:01+02:00</published><updated>2022-06-19T21:55:01+02:00</updated><id>https://www.danebalia.com/jekyll/presentation/hobbies/2022/06/19/tips-on-presenting</id><content type="html" xml:base="https://www.danebalia.com/jekyll/presentation/hobbies/2022/06/19/tips-on-presenting.html">&lt;h2 id=&quot;tip-1-find-a-mechanism-for-calming-your-nerves&quot;&gt;Tip #1 Find a mechanism for calming your nerves&lt;/h2&gt;

&lt;p&gt;Practice this so you can lean on it. It could be something as simple as breathing with mindfulness. For me, a deep breath in, 7 second breath out. You could also combine that with some mental cues or reminders, “stay calm and speak slowly, you got this”.&lt;/p&gt;

&lt;p&gt;Re-enforcing this during practice and dry-runs gives you a foundation, a sure place you can be reference, especially when things get nervy.&lt;/p&gt;

&lt;h2 id=&quot;tip-2-unconsciously-competent&quot;&gt;Tip #2 Unconsciously competent&lt;/h2&gt;

&lt;p&gt;You should remember the key points of your talk with unconscious competance. You should be able to deliver your talk in the car while driving, while shaving….you get the point.&lt;/p&gt;

&lt;h2 id=&quot;tip-3-dont-memorize&quot;&gt;Tip #3 Don’t memorize&lt;/h2&gt;

&lt;p&gt;Don’t try memorize the exact words of your talk as word’s forgotten will introduce more nerves. More nerves will mean sentences forgotten and soon you will find yourself in a downward spiral.&lt;/p&gt;

&lt;p&gt;Instead, memorize key points needed to be communicated per slide. Then allow your mind to freely flow on how it chooses to communicate those points. This will keep the talk dynamic instead of scripted.&lt;/p&gt;

&lt;h2 id=&quot;tip-4-prepare-for-failure&quot;&gt;Tip #4 Prepare for failure&lt;/h2&gt;

&lt;p&gt;You are going to mess up something during the talk, refer back to Tip #1 (your mechanics for recovery). Think through strategies that would enable you to get back on the right track when you forget something.&lt;/p&gt;

&lt;h2 id=&quot;tip-5-slides-should-not-contain-text&quot;&gt;Tip #5 Slides should not contain text&lt;/h2&gt;

&lt;p&gt;Slides should only contain text that re-emphasizes some point to the audience&lt;/p&gt;

&lt;h2 id=&quot;tip-6-give-the-audience-a-rally-cry&quot;&gt;Tip #6 Give the audience a rally cry&lt;/h2&gt;

&lt;p&gt;Encourage the audience at the end to take some action.&lt;/p&gt;

&lt;h2 id=&quot;tip-7-ensure-your-talk-has-structure&quot;&gt;Tip #7 Ensure your talk has structure&lt;/h2&gt;

&lt;p&gt;Follow the basics around having introduction, body and conclusion.&lt;/p&gt;

&lt;h2 id=&quot;tip-8-do-as-many-dry-runs-as-possible&quot;&gt;Tip #8 Do as many dry-runs as possible&lt;/h2&gt;

&lt;p&gt;Get your team mates at work to listen to you, sign up a smaller event, have dry-runs at the physical venue, but practice, practice, practice. If you can get on stage - play the day out in your mind. View the audience, walk through how you would stand, talk, think. Do it. Get your body, mind and soul comfortable.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="presentation" /><category term="hobbies" /><summary type="html">Tip #1 Find a mechanism for calming your nerves</summary></entry><entry><title type="html">The Rich World Of IDEs</title><link href="https://www.danebalia.com/jekyll/presentation/hobbies/2022/06/06/the-rich-world-of-ides.html" rel="alternate" type="text/html" title="The Rich World Of IDEs" /><published>2022-06-06T20:55:01+02:00</published><updated>2022-06-06T20:55:01+02:00</updated><id>https://www.danebalia.com/jekyll/presentation/hobbies/2022/06/06/the-rich-world-of-ides</id><content type="html" xml:base="https://www.danebalia.com/jekyll/presentation/hobbies/2022/06/06/the-rich-world-of-ides.html">&lt;p&gt;Welcome to the Rich World of IDE’s. But before we continue our journey we need to revisit the past, for only when we see the past can we truly understand our present and the beauty of tomorrow.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;As we commence our journey,&lt;/strong&gt; we will look at the path that led to their creation,  where we are today, what they will look like tomorrow and how you may be using them today without even recognizing it. BUT ALSO, amidst the giants of IDE’s known today, I will also cover some weird, wonderful, hidden gems even some crazy and some life-draining.&lt;/p&gt;

&lt;h3 id=&quot;what-is-an-ide&quot;&gt;What is an IDE&lt;/h3&gt;
&lt;p&gt;An IDE is not a text editor. For example, NotePad++  or Sublime Text do not qualify. Apologies if that’s news, but the fundamental mistake is to confuse a Text Editor as an IDE. An IDE consists of three main parts,&lt;/p&gt;

&lt;p&gt;A &lt;strong&gt;source code editor&lt;/strong&gt;  - a text editor that can assist in writing code with features such as syntax highlighting, auto-completion, checking for bugs as code is being written.&lt;/p&gt;

&lt;p&gt;The second component is &lt;strong&gt;local build automation&lt;/strong&gt; - utilities that automate simple, repeatable tasks as part of creating a local build or artifact of the software for use by the developer. Examples are, compiling or interpreting source, packaging binary code and running automated tests.&lt;/p&gt;

&lt;p&gt;The third component is that of a &lt;strong&gt;debugger&lt;/strong&gt;. The ability for graphically moving through the original code while it is running or as it runs.&lt;/p&gt;

&lt;h2 id=&quot;the-evolution-that-spurned-the-ide-milestones&quot;&gt;The Evolution that spurned the IDE (milestones)&lt;/h2&gt;
&lt;h4 id=&quot;1-the-punch-card-manual&quot;&gt;1. The Punch card (manual)&lt;/h4&gt;
&lt;p&gt;And so we wind back the hand of time to a reasonable start, the punch-card (the evolution of Joseph Marie Jacquards automated loom). The punch card or punched cards, was also known as Hollerith cards where holes where punched to represent computer data and instructions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The cards were fed into a card reader connected to a computer, which converted the sequence of holes to digital information.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Each card would be punched according to columns, going from 0 on the top left corner down to the bottom left in a near excel manner. Each card could hold only so much data, so multiple cards were input into the card reader in exact order, loaded into memory and thereafter the code executed or submitted to the compiler.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/punch_card.jpg&quot; alt=&quot;Punch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The largest punch card program was from the 1950’s SAGE air defense system, which used 62500 punched cards (around 5 MB  of data). As you can imagine, the fear of dropping or getting the cards out of order was REAL. In some cases, it wouldn’t be possible to put the program back into order.&lt;/p&gt;

&lt;p&gt;Interesting fact - that as of 2012, while punched cards were still obsolete some voting machines still used punched cards to record votes.&lt;/p&gt;

&lt;h4 id=&quot;dartmouth&quot;&gt;Dartmouth&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/800px-LGP-30.jc1.jpg&quot; alt=&quot;Darth&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The next piece in the puzzle leading up to the IDE was the Dartmouth Basic Language.  &lt;strong&gt;Professors John Kemeny and Thomas Kurtz&lt;/strong&gt; at Dartmouth College purchased a Royal McBee LGP-30 around 1959 and programmed an implementation of the then popular ALGOL 58 programming language.&lt;/p&gt;

&lt;p&gt;But there was a problem at the time, that only one student could access a computer at a time, and they were expensive. So Kurtz in 1961/62 proposed the following: that all Dartmouth student should have access to computing, it should be free and open-access. Based of that principal they forged forward along with their students and developed the first critical piece, DTSS - the Dartmouth time-sharing operating system. And so began in Autumn of 1964, hundreds of university students began to use the system via 20 teletypes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/600px-ASR-33_Teletype_terminal_IMG_1658.jpg&quot; alt=&quot;&quot; /&gt;
DTSS consisted of two machines, the Datanet-30 which provided the user-interface and scheduler, while user programs ran in the GE-225. The GE-225 was later replaced by the faster GE-235 allowing for the support of forty simultaneous users.  Kemeny and Kurtz observed, “any response time which averages more than 10 seconds destroys the illusion of having one’s own computer” so the DTSS design emphasized immediate feedback.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519061217.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The second crucial piece they contributed at the same time was the BASIC compiler (Beginners All purpose symbolic instruction code). The aim of BASIC was that they wanted to enable students in non-scientific fields to use computers. At the time, nearly all computers required writing custom software, which only scientists and mathematicians tended to learn. Along with DTSS, this proliferated it’s usage and adoption.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/H-20734-2.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;But why is this important?&lt;/strong&gt; Because of the push for ease of use and open-access, they then implemented the world’s first hardware IDE. Any line typed in by the user, and beginning with a specific line number; was added to the program replacing any previously stored line with the same number. Anything else was taken and immediately executed. This method of editing provided a simple and easy to use service that allowed large numbers to input at their terminal units for the DTTS.&lt;/p&gt;

&lt;h4 id=&quot;3--maestro-i-first-ide-software&quot;&gt;3.  Maestro I First IDE (software)&lt;/h4&gt;
&lt;p&gt;We have looked at the necessary advancements that were manual in the punch cards, and the hardware based advancements through DTSS, BASIC and our first IDE. Our next and final stop on this historic journey is that of the Maestro I.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/1024px-Maestro-I-Keyboard.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This was an early software IDE developed by Softlab Munich in the 1970’s and 80s. The system was originally called “program development terminal system” abbreviated as PET.&lt;/p&gt;

&lt;p&gt;The advancement here was that unlike the DTSS system we just looked at where instructions were accumulated through time-sharing and edited via IDE commands, the Maestro solved this by feeding each key-stroke directly to the CPU.&lt;/p&gt;

&lt;h4 id=&quot;4--the-pattern-of-evolution&quot;&gt;4.  The Pattern of Evolution&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519093534.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Just to close of before we move onto the IDE’s today, there is quite a debate around the first GUI IDE and not much by history. There seems to be two competing positions, one says SmallTalk and the other Visual Basic. You pick your poison ;)&lt;/p&gt;

&lt;h2 id=&quot;where-we-are-today&quot;&gt;Where we are today&lt;/h2&gt;

&lt;h4 id=&quot;1--most-prominent-ides&quot;&gt;1.  Most prominent IDE’s&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519100803.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’m sure the prominent IDE’s of the day need no introduction. Visual Studio and Visual Studio Code holds 43% market share, with Visual Studio having 30%, Eclipse 14% and Visual Studio on 12%.&lt;/p&gt;

&lt;p&gt;PyPL trawls data in Github and community websites, so let’s overlay that with direct feedback from over 80 000 developers across the world in 2021. 70% of respondents say they use Visual Studio Code, 33% say they use Visual Studio and 29% Notepad++.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519102349.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;What makes Visual Studio Code so powerful and dominant is firstly it is open-source and cross-platform being largely built in Electron and NodeJS. The second aspect in my opinion, was it’s contribution of LSP (language server protocol), providing language intelligence as an open standard.&lt;/p&gt;

&lt;p&gt;LSP didn’t just unlock doors for Microsoft, Microsoft unlocked doors for other IDE’s and editor communities. LSP is basically a JSON-based data exchange protocol for providing &lt;strong&gt;intelligent language services consistently across code editors and IDE’s&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/language-server-sequence.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;LSP enabled the integration of features like auto complete, go to definition, find all references and a host of other intelligence. The best part, is that if the IDE doesn’t support a specific language, the community (you and I) now have the ability to implement it and plug it in for whatever weird fetish of a language we may choose. In fact, LSP is not restricted to programming languages alone, it can be used by any kind of text-based language that is custom to you or your business (DSL).&lt;/p&gt;

&lt;p&gt;While many slate Microsoft for being many things, one massive contribution is LSP. In fact, the IDE I enjoy most Emacs which was written in the 1970’s is now far more accessible because it has integrated LSP allowing it to be open to languages like C#, Go, Java etc and not just LISP.&lt;/p&gt;

&lt;h3 id=&quot;2--some-crazy-ides&quot;&gt;2.  Some crazy ides&lt;/h3&gt;
&lt;p&gt;I would be re-miss if I didn’t draw attention to two very large communities, and that of Vim and Emacs. While some may consider Visual queue IDE’s as the only future, there are still two very large communities for Vim and Emacs that is keyboard-driven.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/initialNvim.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In fact, large communities have formed around them and modernized them for every day use. For Vim you have Neovim, which has about 800 contributors in comparison to VSCode which has 1200. What makes vim so attractive is that it’s base form is found on almost every installation of Linux. So if you involved in DevOps, Developer or hobbyist using Linux you probably stumbled onto it, either famously failing to quit it or falling in love.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/R.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then for Emacs there is SpaceMacs, with a very active community 100 short of VsCode with 1100 contributors.  Emacs draw card is that it is highly extensible and touts three features that are specific to it, TRAMP which enables remote editing of files, Org-Mode which enables rapid note taking, authoring documents, computational notebooks, literate programming, maintaining to-do lists etc. The third is Magit, which is an application that allows the perfect balance of UI and Console interaction with Git or git providers. Emacs community is so enthusiastic about their IDE there’s even a Window Manager called EXWM that managers all your windows from your browser to anything in your Linux Desktop so much so, that you never leave Emacs.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/R1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So why use one of these two editors? Well aside from their own individual features, they allow for rapid navigation, an array of keyboard shortcuts and customization.&lt;/p&gt;

&lt;h3 id=&quot;3--ides-breaking-barriers&quot;&gt;3.  IDE’s breaking barriers&lt;/h3&gt;
&lt;h4 id=&quot;khan-academy&quot;&gt;Khan Academy&lt;/h4&gt;

&lt;p&gt;I’ve been recently looking at introducing my 7 and 9 year old into programming and there are amazing tools. While I’ve taken the journey of starting them off on a board game that teaches elementary logic needed for programming, I’ve now found more advanced engagement with Drawing and Animation course @ Khan Academy. It’s provides a dumbed down UI that does syntax highlighting, basic debugging, building and rendering. It’s amazing. IDE’s are now becoming tools for expression of ideas, creativity and even design.&lt;/p&gt;

&lt;p&gt;This picture is by my 9 year old, it’s actually animated and is called parting clouds. She’s a passionate engineer whereas my second is a super creative pixies and fairy land kind of dreamer, and both were amazed by what they were able to accomplish with a few lines of code - magic on screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519160318.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;scratch&quot;&gt;Scratch&lt;/h4&gt;

&lt;p&gt;As I mentioned my 9 year old has been demanding to learn more about engineering and I stumbled onto this little device. It connects to your PC with USB (entirely plug and play) and has a speaker, buttons on the left and right to take clicks as input, has those LED’s to displays messages, has a gyro and a mic and event a touch sensor. I was amazed and I wanted one, but what blew me away even further, was that they made this entirely accessible to kids through a Scratch type IDE. In this case, it’s MakeCode by Microsoft.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/led-screen-27qu5u8.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519161433.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;By dragging simple blocks you are able to interact with the micro-bit, turn on a servo, make a motion detection camera - get your kid to built out their imagination, and the best part, they can code it themselves.&lt;/p&gt;

&lt;h2 id=&quot;the-advancements-of-tomorrow&quot;&gt;The advancements of tomorrow&lt;/h2&gt;

&lt;h4 id=&quot;1-ai-in-the-ide&quot;&gt;1. AI In the IDE&lt;/h4&gt;

&lt;p&gt;Some of the advancements we are seeing in IDE’s in 2022 is that of the introduction of AI. AI in the IDE is definitely not new, but during it’s current boom the technology has definitely come to the forefront, with 5 players in Github CoPilot, Kite, Intellicode, TabNine and OpenAI Codex.&lt;/p&gt;

&lt;p&gt;So how do they assist? Largely the guidance and code completion comes from patterns learned from millions of public repositories and projects.  If you are considering using the tooling there are some important questions:&lt;/p&gt;

&lt;p&gt;(a) Is the artificial intelligence distributed or local? Is your code going over the wire?&lt;br /&gt;
(b) What is the code quality given it’s based on open source projects? How long before it does produce quality?&lt;br /&gt;
(c) Most time with code generation tools, you end up with more code than you intended.&lt;br /&gt;
(d) In terms of business development, is there any breaches in license or legal implications in using code found in the wild.&lt;br /&gt;
(e) According to OpenAI, Codex only gives the correct answer 29% of the time.&lt;/p&gt;

&lt;p&gt;Overall, this can only get better. Consider for a moment, a company onboarding juniors and in their daily jobs, junior and new developers are given automated code-assistance on best practices and suggestions trained by models within the organization and it’s senior developers. Suddenly, we scale people, we accelerate growth and we minimize friction!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519171808.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519171958.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;2-no-code&quot;&gt;2. No Code&lt;/h4&gt;

&lt;p&gt;There’s two aspects here and they often get conflated, there’s No-code and Low-code. Low-code is ability for developers to accelerate their development through minimal code.
No-code on the other hand is catered to business people or others in IT that don’t know a programming language and able to build systems through drag-and-drop or visual development.&lt;/p&gt;

&lt;p&gt;Gartner predicts that by 2023, over 50% of medium to large enterprises will have adopted low-code or no-code as one of their strategic platforms and low-code will be responsible for more than 65% of application development by 2024.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/No-code-low-code.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The world of IDE’s has indeed changed and continues to change, but if anything there is a &lt;strong&gt;bright future ahead&lt;/strong&gt;. But while there is much to look forward by way of advancements in AI and Machine Learning, let us not fall to see the &lt;strong&gt;privilege&lt;/strong&gt; and &lt;strong&gt;opportunity&lt;/strong&gt; we have today. There is a &lt;strong&gt;very low barrier&lt;/strong&gt; to allowing your &lt;strong&gt;creative&lt;/strong&gt; juices to flow and find an expression of who you are through code.&lt;/p&gt;

&lt;p&gt;IDE’s have taken many forms. Scratch and block-code has opened up a whole new world for kids to be able to code and create themselves. Makecode has opened up  the world of engineering, computing, home automation to everyone. AI and Low-code are enabling developers to accelerate in the work-place and whose potential we are unlocking. IDE’s themselves have garnished communities and contributors who are able to impact and improve productivity of millions. Opportunity is around. Creativity abounds, and all that is missing from the puzzle is YOU.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/20220519193200.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Go out and create!&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;&quot;&gt;Dartmouth BASIC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://webot.org/info/en/?search=Teleprinter&quot;&gt;Teletypes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Maestro_I#/media/File:Maestro-I-Keyboard.JPG&quot;&gt;Maestro I&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pypl.github.io/IDE.html&quot;&gt;PyPL Index&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://insights.stackoverflow.com/survey/2021&quot;&gt;2021 Stackoverflow Survey&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/MicrosoftDocs/intellicode/issues/102&quot;&gt;Intellicode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.fast.ai/2021/07/19/copilot/&quot;&gt;Fast.ai blessing or curse?&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="presentation" /><category term="hobbies" /><summary type="html">Welcome to the Rich World of IDE’s. But before we continue our journey we need to revisit the past, for only when we see the past can we truly understand our present and the beauty of tomorrow.</summary></entry><entry><title type="html">Team Leads Manual</title><link href="https://www.danebalia.com/jekyll/leadership/2022/05/07/team-leads-manual.html" rel="alternate" type="text/html" title="Team Leads Manual" /><published>2022-05-07T23:54:43+02:00</published><updated>2022-05-07T23:54:43+02:00</updated><id>https://www.danebalia.com/jekyll/leadership/2022/05/07/team-leads-manual</id><content type="html" xml:base="https://www.danebalia.com/jekyll/leadership/2022/05/07/team-leads-manual.html">&lt;p&gt;&lt;img src=&quot;/images/serve.jpg&quot; alt=&quot;Leadership&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-this&quot;&gt;What is this&lt;/h2&gt;
&lt;p&gt;It’s the &lt;em&gt;essence&lt;/em&gt; of how I operate as a TL.&lt;br /&gt;
This is not a list of rules of how I operate, but the under-current of values and thinking that guides those operations.&lt;/p&gt;

&lt;h2 id=&quot;i-am-human&quot;&gt;I am human&lt;/h2&gt;
&lt;p&gt;I am a passionate husband and father. My family is a strong focus and my inspiration.
I am an introvert, a creative, a change agent, potential seeker and a servant-leader.
An avid reader and struggling gamer, yeah 3 kids ;)
Truly enjoy &lt;a href=&quot;https://www.youtube.com/BeachYoga&quot;&gt;yoga!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My approach to life is guided by 5 principals (5 BE’s):&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Be Simple - Large doors swing on small hinges (problems)&lt;/li&gt;
  &lt;li&gt;Be Confident - Know you can. Trust you can. Practice so you can (attitude)&lt;/li&gt;
  &lt;li&gt;Be Focused - Limit the scope to whats manageable and what produces the most immediate feedback (productivity)&lt;/li&gt;
  &lt;li&gt;Be True - True To Self. True To Others. Seek truth in every situation as it’s the only effective way to diagnose reality (character)&lt;/li&gt;
  &lt;li&gt;Be Consistent - Habits done consistently produce effectivity (actions)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;three-core-values&quot;&gt;Three core values&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.radicalcandor.com/&quot;&gt;Radical Candour&lt;/a&gt; - caring for others requires candid communication.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Crucial-Conversations-Talking-Stakes-Second/dp/1469266822&quot;&gt;Mutual Purpose&lt;/a&gt; - manage the stories we tell ourselves about others. In conflict seek to understand your purpose and that of the other person.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.timetothink.com/book/time-to-think/&quot;&gt;Psychological Safety&lt;/a&gt; - the effectiveness of our thinking relates to how we treat one another&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;how-i-manage&quot;&gt;How I manage&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;I aim to set clear expectations and be direct about it’s accountability. When I fail to do so adequately, please feedback.&lt;/li&gt;
  &lt;li&gt;I have a natural and genuine care for those who I am responsible for.&lt;/li&gt;
  &lt;li&gt;I eagerly welcome feedback with facts, examples and/or specifics. Vice versa.&lt;/li&gt;
  &lt;li&gt;If it doesn’t work, lets build a plan, or just get rid of it.&lt;/li&gt;
  &lt;li&gt;I aim to do whats right. But sometimes right is not effective. If not harmful, do whats effective.&lt;/li&gt;
  &lt;li&gt;Everyone desires to give their best and is sincere in what they are trying to communicate.&lt;/li&gt;
  &lt;li&gt;“We don’t click” can be an emotion based on the spiraling stories we have told ourselves. Seperate the facts from the stories.&lt;/li&gt;
  &lt;li&gt;I enjoy collaboration particularly with the multiplicity and diversity of minds.&lt;/li&gt;
  &lt;li&gt;If you not getting to deep work, reach out, I will do my utmost to figure out how to unblock you.&lt;/li&gt;
  &lt;li&gt;I am work in progress.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;areas-im-working-to-improve&quot;&gt;Areas I’m working to improve…&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Switching too quickly from problem definition to problem resolution.&lt;/li&gt;
  &lt;li&gt;Effecting change at a less rapid rate (at times).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;

&lt;h3 id=&quot;people&quot;&gt;People&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Trying to fit in results in insecurity&lt;/li&gt;
  &lt;li&gt;Your relationship you have with your team mates should be without condition.&lt;/li&gt;
  &lt;li&gt;The opposite of collaboration is COMPETITION.&lt;/li&gt;
  &lt;li&gt;Rather be HARD with people than SOFT. Hard mistakes like being UNFAIR leaves responsibility with the individual to change or innovate. SOFT mistakes are unknown and thus responsibility or ownership has not transferred.&lt;/li&gt;
  &lt;li&gt;Trust is when a team member does what the standards define.&lt;/li&gt;
  &lt;li&gt;REAL Trust happens when a team member does what the standards define and comes alongside others to aid and enable (a soccer team)&lt;/li&gt;
  &lt;li&gt;You can’t train will&lt;/li&gt;
  &lt;li&gt;Don’t create a dependence on yourself to get things DONE. Hold people accountable. Treat them like adults.&lt;/li&gt;
  &lt;li&gt;Easy to care about top performers and give them special preference. But that sets a precedent.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;person&quot;&gt;Person&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;For people to be willing - you have to GIVE. Don’t be a TAKER.&lt;/li&gt;
  &lt;li&gt;Surplus in an organization results from having more GIVE than TAKE.&lt;/li&gt;
  &lt;li&gt;If you desire to be liked (reputation and status), the POWER dynamic of the relationship then becomes that you hand over power to that individual opening up yourself to manipulation.&lt;/li&gt;
  &lt;li&gt;Be you, don’t try to fit in. If you fit in you will never attain that expectation. Just be YOU.&lt;/li&gt;
  &lt;li&gt;VALUES are a set of things that are abstractions above one’s own self-interest&lt;/li&gt;
  &lt;li&gt;A LEADER is a higher level of thought-through maturity and action&lt;/li&gt;
  &lt;li&gt;As a leader you must always WTG (watch the game)&lt;/li&gt;
  &lt;li&gt;CARE = TIME + ATTENTION&lt;/li&gt;
  &lt;li&gt;CARE = unconditional&lt;/li&gt;
  &lt;li&gt;CARE  cannot exist without accountability&lt;/li&gt;
  &lt;li&gt;HOLY THREE (twine): Accountability &amp;amp; Trust &amp;amp; Courage&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;process&quot;&gt;Process&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Don’t use PIP to get rid of employee’s. They are there to empower people.&lt;/li&gt;
  &lt;li&gt;PIPs need better marketing - they are a way to improve individuals, the relationship with their lead&lt;/li&gt;
  &lt;li&gt;To empower a team, you define STANDARDS and not BHAG (big audacious hairy goals). Goals can diminish and build a pattern of non-delivery. Failure becomes a HABIT. STANDARDS are the operating procedures, best practices etc.&lt;/li&gt;
  &lt;li&gt;STANDARDS are the bare minimum&lt;/li&gt;
  &lt;li&gt;DON’T PROMOTE. Only offer promotions.&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="jekyll" /><category term="leadership" /><summary type="html"></summary></entry><entry><title type="html">Emacs For The Win</title><link href="https://www.danebalia.com/jekyll/hobbies/2022/04/18/emacs-for-the-win.html" rel="alternate" type="text/html" title="Emacs For The Win" /><published>2022-04-18T19:28:43+02:00</published><updated>2022-04-18T19:28:43+02:00</updated><id>https://www.danebalia.com/jekyll/hobbies/2022/04/18/emacs-for-the-win</id><content type="html" xml:base="https://www.danebalia.com/jekyll/hobbies/2022/04/18/emacs-for-the-win.html">&lt;p&gt;&lt;img src=&quot;/images/doom.png&quot; alt=&quot;Emacs&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;wsl2-woes&quot;&gt;WSL2 woes&lt;/h3&gt;

&lt;p&gt;My IDE of choice for the past year has been Emacs, more specfically &lt;a href=&quot;https://github.com/hlissner/doom-emacs&quot;&gt;Doom Emacs&lt;/a&gt;. However in changing jobs I’ve found myself cornered on a Windows desktop. This has posed some challenges, specifically around having a fast and smooth development experience using Emacs. My get up and running approach was to install Emacs vanilla with a pre-built &lt;a href=&quot;http://ftp.wayne.edu/gnu/emacs/windows/emacs-28/&quot;&gt;binary&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But alas, this resulted in a 20+ second load time. So I chose the next best thing, WSL2. WSL2 on Windows 11 is an amazing option given that you can now leverage GTK. For instructions on doing this look no further then &lt;a href=&quot;https://emacsredux.com/blog/2021/12/19/using-emacs-on-windows-11-with-wsl2/&quot;&gt;Bozhidar Batsov&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I followed this process, compiled Emacs 29 with PGTK and even added the hack for copying from Windows to Emacs. But I was disappointed with an experience of instability, where Emacs would occassionally crash (without warning) and at times copying being sporadic or not working in certain screens. But the real killer was the networking from WSL2 to my Windows Host.&lt;/p&gt;

&lt;p&gt;While everything worked largely, I run a VPN for work purposes. I solved that largely using &lt;a href=&quot;https://github.com/sakai135/wsl-vpnkit&quot;&gt;WSL VpnKit&lt;/a&gt;. This however broke at times. Thereafter further complications resulted from requiring OpenSSL certificates found in Windows that were not in WSL2. So between random crashes, sporadic network failures and configuration pains was a huge loss of time. And for that I ditched Emacs, and moved to VSCode.&lt;/p&gt;

&lt;h3 id=&quot;emacs-joy&quot;&gt;Emacs joy&lt;/h3&gt;

&lt;p&gt;But despite the smooth experience and easy configuration of VsCode, I just couldn’t push past the missing workflow, the keyboard shortcuts and the design. I will take my hat of to the amazing VsCode community, they have even taken some of the best things about Emacs and incorporated it, like &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=kahole.magit&quot;&gt;Magit&lt;/a&gt; and an almost &lt;a href=&quot;https://vscode-org-mode.github.io/vscode-org-mode/&quot;&gt;Org Roam&lt;/a&gt; or &lt;a href=&quot;https://hodgkins.io/vscode-second-brain&quot;&gt;Custom second brain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So I scratched the itch and found that I could significantly improve performance using &lt;a href=&quot;https://www.msys2.org/&quot;&gt;MSYS2&lt;/a&gt;. While this is based of Cygwin, it first natively compiles and leverages off Cygwin secondarily.&lt;/p&gt;

&lt;h3 id=&quot;steps&quot;&gt;Steps&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.msys2.org/&quot;&gt;MSYS2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Run “MSYS2 Msys”, and install some key compilation requirements:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman -Sy --needed filesystem msys2-runtime bash libreadline libiconv libarchive libgpgme libcurl pacman ncurses libintl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Run the following, and then close and re-open.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman -Su
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Install the Emacs dependencies
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman -Su autoconf autogen automake automake-wrapper diffutils git guile libgc libguile libltdl libunistring  make mingw-w64-x86_64-binutils mingw-w64-x86_64-bzip2 mingw-w64-x86_64-cairo mingw-w64-x86_64-cloog mingw-w64-x86_64-crt-git mingw-w64-x86_64-dbus mingw-w64-x86_64-expat mingw-w64-x86_64-fontconfig mingw-w64-x86_64-freetype mingw-w64-x86_64-gcc mingw-w64-x86_64-gcc-libs mingw-w64-x86_64-gdk-pixbuf2 mingw-w64-x86_64-gettext mingw-w64-x86_64-giflib mingw-w64-x86_64-glib2 mingw-w64-x86_64-gmp mingw-w64-x86_64-gnutls mingw-w64-x86_64-harfbuzz mingw-w64-x86_64-headers-git mingw-w64-x86_64-imagemagick mingw-w64-x86_64-isl mingw-w64-x86_64-libcroco mingw-w64-x86_64-libffi mingw-w64-x86_64-libgccjit mingw-w64-x86_64-libiconv  mingw-w64-x86_64-libjpeg-turbo mingw-w64-x86_64-libpng mingw-w64-x86_64-librsvg mingw-w64-x86_64-libtiff mingw-w64-x86_64-libwinpthread-git mingw-w64-x86_64-libxml2 mingw-w64-x86_64-mpc mingw-w64-x86_64-mpfr mingw-w64-x86_64-pango mingw-w64-x86_64-pixman mingw-w64-x86_64-winpthreads mingw-w64-x86_64-xpm-nox mingw-w64-x86_64-lcms2 mingw-w64-x86_64-xz mingw-w64-x86_64-zlib tar wget
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Clone Emacs
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone http://git.savannah.gnu.org/r/emacs.git emacs-29
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Git Config requirement
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git config core.autocrlf false
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Setup
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  cd emacs-29
  ./autogen.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure
Configure the features and functionality you may require. With the last argument ‘prefix’, you can define the location for your installation.
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ./configure     --host=x86_64-w64-mingw32     --target=x86_64-w64-mingw32     --build=x86_64-w64-mingw32     --with-native-compilation     --with-gnutls     --with-imagemagick     --with-jpeg     --with-json     --with-png     --with-rsvg     --with-tiff     --with-wide-int     --with-xft     --with-xml2     --with-xpm     'CFLAGS=-I/mingw64/include/noX'     prefix=/c/emacs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Build and Install
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;make
make install prefix=/c/emacs/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;success&quot;&gt;Success&lt;/h3&gt;
&lt;p&gt;Here on out you should have a successful build. It is from here I then install Doom Emacs. A key step I initially missed was setting an environment variable for the mingw64 libraries and binaries as a Windows environment variable.&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C:\msys64\mingw64\bin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After Doom install, I use command prompt or Powershell to start Emacs&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;doom run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;installation-options-pros-and-cons&quot;&gt;Installation Options Pros and Cons&lt;/h3&gt;
&lt;p&gt;&lt;a id=&quot;org4d72446&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;table border=&quot;2&quot; cellspacing=&quot;0&quot; cellpadding=&quot;6&quot; rules=&quot;groups&quot; frame=&quot;hsides&quot;&gt;


&lt;colgroup&gt;
&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-left&quot; /&gt;

&lt;col class=&quot;org-right&quot; /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Type of Install&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Peformant&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Native&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Image paste&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Broken dependencies&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Complex setup&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Networking issues&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Terminal&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Stability&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Host OS&lt;/td&gt;
&lt;td class=&quot;org-right&quot;&gt;Version&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Windows Binary&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Slow&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Eshell&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Very good&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Windows&lt;/td&gt;
&lt;td class=&quot;org-right&quot;&gt;28&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Msys2 Binary&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Very fast&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y (no java, dotnet)&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Eshell&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Very good&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Msys2&lt;/td&gt;
&lt;td class=&quot;org-right&quot;&gt;28&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;Msys2 Source&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Very fast&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y (no java, dotnet)&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Eshell&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Good&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Msys2&lt;/td&gt;
&lt;td class=&quot;org-right&quot;&gt;29&lt;/td&gt;
&lt;/tr&gt;


&lt;tr&gt;
&lt;td class=&quot;org-left&quot;&gt;WSL2&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Fast&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;N&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Y&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;VTerm&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Good&lt;/td&gt;
&lt;td class=&quot;org-left&quot;&gt;Linux&lt;/td&gt;
&lt;td class=&quot;org-right&quot;&gt;29&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content><author><name></name></author><category term="jekyll" /><category term="hobbies" /><summary type="html"></summary></entry><entry><title type="html">2022 Reading List</title><link href="https://www.danebalia.com/jekyll/update/hobbies/2022/02/03/2022-reading-list.html" rel="alternate" type="text/html" title="2022 Reading List" /><published>2022-02-03T10:16:00+02:00</published><updated>2022-02-03T10:16:00+02:00</updated><id>https://www.danebalia.com/jekyll/update/hobbies/2022/02/03/2022-reading-list</id><content type="html" xml:base="https://www.danebalia.com/jekyll/update/hobbies/2022/02/03/2022-reading-list.html">&lt;p&gt;&lt;img src=&quot;/images/books.png&quot; alt=&quot;2022 Reading List&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;read&quot;&gt;Read:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.paultripp.com/redeeming-money&quot;&gt;Redeeming Money&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/162823.The_Case_Book_of_Sherlock_Holmes&quot;&gt;A Study in Scalett&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/45722123-noble-beginnings&quot;&gt;Noble Beginnings&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/18006972-quiet&quot;&gt;Quiet: Power Of Introverts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/46000520-the-thursday-murder-club&quot;&gt;The Thursday Murder Club&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/25076674-the-alchemist&quot;&gt;The Alchemist&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/20174383-billy-sunday&quot;&gt;Bill Sunday: The Man and His Message&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/194366.The_Return_of_Sherlock_Holmes&quot;&gt;The Return of Sherlock Holmes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/45169.Step_on_a_Crack&quot;&gt;Step on a Crack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/162823.The_Case_Book_of_Sherlock_Holmes&quot;&gt;The Case-book of Sherlock&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/8921.The_Hound_of_the_Baskervilles&quot;&gt;The Hound of Baskervilles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/53720447-connect&quot;&gt;Connect: Building Exceptional Relationships with Family, Friends and Collegues&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/42382290-soulwinning&quot;&gt;Soulwinning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/53304234-deluded-gods&quot;&gt;Deluded Gods&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Subtle-Art-Not-Giving-Counterintuitive/dp/0062457713&quot;&gt;The Subtle Art of Not Giving a F*ck&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Dark-Tower-Gunslinger-Peter-David/dp/0785121447/ref=sr_1_3?crid=3IL7YWKL9IZKP&amp;amp;keywords=the+gunslinger+stephen+king&amp;amp;qid=1669008633&amp;amp;s=books&amp;amp;sprefix=the+gunslinger%2Cstripbooks-intl-ship%2C422&amp;amp;sr=1-3&quot;&gt;The Gun Slinger&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Keane-Autobiography-Roy/dp/0718193997/ref=sr_1_1?crid=2OZ7PSEMWB9R9&amp;amp;keywords=keane+autobiography&amp;amp;qid=1669008681&amp;amp;s=audible&amp;amp;sprefix=keane+autobiograph%2Caudible%2C292&amp;amp;sr=1-1-catcorr&quot;&gt;Keane: The Autobiography&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/The-Black-Echo-Michael-Connelly-audiobook/dp/B001BACYFM/ref=sr_1_1?crid=2WMS1LXAN82IL&amp;amp;keywords=the+black+echo&amp;amp;qid=1669008750&amp;amp;sprefix=the+black+echo%2Caps%2C296&amp;amp;sr=8-1&quot;&gt;The Black Echo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;planned&quot;&gt;Planned:&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://craftinginterpreters.com/&quot;&gt;Robert Nystrom - Crafting Intepreters&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://csharpindepth.com/&quot;&gt;John Skeet - C# in Depth &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/15842786-understanding-computation&quot;&gt;Tom Stuart - Understanding Computation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://geraldmweinberg.com/Site/QSM_vol_1.html&quot;&gt;Gerald Weinberg - Quality Software Management, Vol 1: Systems Thinking&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Thinking-Systems-Donella-H-Meadows/dp/1603580557&quot;&gt;Donella Meadows - Thinking in Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/1491983647?tag=bbookshub-20&amp;amp;linkCode=ogi&amp;amp;th=1&amp;amp;psc=1&quot;&gt;Brendan Burns - Designing Distributed Systems&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/dp/0735211299/ref=s9_acsd_ri_bw_c2_x_2_t?pf_rd_m=ATVPDKIKX0DER&amp;amp;pf_rd_s=merchandised-search-10&amp;amp;pf_rd_r=K4AABKRFED653GK6369A&amp;amp;pf_rd_t=101&amp;amp;pf_rd_p=ec1034ac-997c-47fd-8075-3a3a4b4c3aa3&amp;amp;pf_rd_i=283155&quot;&gt;James Clear - Atomic Habits&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.larkinestate.com/books/dispensational-truth.html&quot;&gt;Clarence Larking - Dispensational Truth&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.goodreads.com/book/show/11468377-thinking-fast-and-slow&quot;&gt;Daniel Kahneman - Thinking Fast and Slow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sre.google/books/&quot;&gt;Betsy Beyer - Site Reliability Engineering&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.amazon.com/Think-Again-Power-Knowing-What/dp/1984878107&quot;&gt;Adam Grant - Think Again&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bookshop.org/books/rationality-what-it-is-why-it-seems-scarce-why-it-matters/9780525561996&quot;&gt;Steven Pinker - Rationality: What It Is, Why It Seems Scarce, Why It Matter&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><category term="hobbies" /><summary type="html"></summary></entry><entry><title type="html">Discouragement</title><link href="https://www.danebalia.com/jekyll/poem/hope/discouragement/2022/01/07/discouragement.html" rel="alternate" type="text/html" title="Discouragement" /><published>2022-01-07T13:19:22+02:00</published><updated>2022-01-07T13:19:22+02:00</updated><id>https://www.danebalia.com/jekyll/poem/hope/discouragement/2022/01/07/discouragement</id><content type="html" xml:base="https://www.danebalia.com/jekyll/poem/hope/discouragement/2022/01/07/discouragement.html">&lt;p&gt;&lt;img src=&quot;/images/discouragement.jpg&quot; alt=&quot;Discouragement&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The road of life &lt;br /&gt;
ah yes the road of life&lt;/p&gt;

&lt;p&gt;At some turn along life, &lt;br /&gt;
there THEY comes with their assault of strife &lt;br /&gt;
with winds that rage and winds that blow, &lt;br /&gt;
they beat, make meat of the courageous feat. &lt;br /&gt;
To live is hard. Is it?&lt;/p&gt;

&lt;p&gt;The weapons of these diabolical demons, &lt;br /&gt;
are seldom understood or even from my hood. &lt;br /&gt;
They beckon me come and surrender the fight. &lt;br /&gt;
They beckon me come and surrender the night.&lt;/p&gt;

&lt;p&gt;What of hopes and dreams and joy and streams, &lt;br /&gt;
What of health and wealth, &lt;br /&gt;
when it’s all abated. &lt;br /&gt;
They come with his assault of strife, &lt;br /&gt;
attacking and sucking me into the darkness.&lt;/p&gt;

&lt;p&gt;I fight, I kick, I whip, I punch, &lt;br /&gt;
I raise my hand, but I get pulled in a bunch. &lt;br /&gt;
They are strong, far stronger than me, &lt;br /&gt;
They deep in my mind causing calamity. &lt;br /&gt;
Turn back turn back the light onto me, &lt;br /&gt;
Turn back turn back its uncomfortable inadequacy.&lt;/p&gt;

&lt;p&gt;FIGHT! FIGHT! I say. I say. &lt;br /&gt;
But the warmth of day is gone &lt;br /&gt;
All around me has diminished, chaos around. Chaos. &lt;br /&gt;
Hope what of it, I know it intellectually. &lt;br /&gt;
But she is hidden. Where I don’t know?&lt;/p&gt;

&lt;p&gt;How did it get all so complex. &lt;br /&gt;
How did THEY get so strong. &lt;br /&gt;
 Who are THEY and why do me wrong. &lt;br /&gt;
My legs are deep in the myrrh now, DEEP. &lt;br /&gt;
Darkness is upon me, and I can’t intellectualize myself away&lt;/p&gt;

&lt;p&gt;A crack from the heavens &lt;br /&gt;
A fizzle? a ray? a sparkle? a way. &lt;br /&gt;
Some spirit illuminates &lt;br /&gt;
“My grace is sufficient for thee: for my strength is made perfect in weakness.”
HUH.&lt;/p&gt;

&lt;p&gt;What did it mean? &lt;br /&gt;
I began to tussle with the words of the spirit, &lt;br /&gt;
I wrestle, turn, twist and contort, &lt;br /&gt;
hammering against 14 challengers a new, &lt;br /&gt;
looking for answers for this light so few.&lt;/p&gt;

&lt;p&gt;And little did I notice, &lt;br /&gt;
that as I wrestled with the 14 challengers that day, &lt;br /&gt;
my contention with THEY went away, &lt;br /&gt;
darkness still loomed in the distance, &lt;br /&gt;
but the battle was over, for now.&lt;/p&gt;

&lt;p&gt;I recited the words of the spirit, &lt;br /&gt;
and then it hit me like a ton of bricks succinctly, &lt;br /&gt;
That it was never about MY OWN *strength** to overcome &lt;br /&gt;
But I was already equipped with *grace sufficient* to step out the darkness &lt;br /&gt;
Despite my inherent weakness.&lt;/p&gt;

&lt;p&gt;They will be back soon, one day, &lt;br /&gt;
and in my weakness to these words I shall cling.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="poem" /><category term="hope" /><category term="discouragement" /><summary type="html"></summary></entry><entry><title type="html">Quick Tour Of Generics In C#</title><link href="https://www.danebalia.com/jekyll/update/programming/2021/09/21/csharp-value-and-ref.html" rel="alternate" type="text/html" title="Quick Tour Of Generics In C#" /><published>2021-09-21T10:25:22+02:00</published><updated>2021-09-21T10:25:22+02:00</updated><id>https://www.danebalia.com/jekyll/update/programming/2021/09/21/csharp-value-and-ref</id><content type="html" xml:base="https://www.danebalia.com/jekyll/update/programming/2021/09/21/csharp-value-and-ref.html">&lt;p&gt;Generics have been around since C# 2.0 and has become a tool we leverage so naturally now in C# we almost don’t even think about it. So let’s change that…&lt;/p&gt;

&lt;h3 id=&quot;definitions&quot;&gt;Definitions&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Generics introduce to the .NET Framework the concept of type parameters, which make it possible to design classes and methods that defer the specification of one or more types until the class or method is declared and instantiated by client code&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Essentially generics allow you parameterize types and methods. Just as normal methods have &lt;em&gt;parameters&lt;/em&gt; to tell them what &lt;em&gt;values&lt;/em&gt; to use, generic types and methods have &lt;em&gt;type parameters&lt;/em&gt; to tell them what &lt;em&gt;types&lt;/em&gt; to use.&lt;/p&gt;

&lt;h3 id=&quot;clarification&quot;&gt;Clarification&lt;/h3&gt;

&lt;p&gt;Type parameters are placeholders for a type.&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;constructed types&lt;/em&gt; and &lt;em&gt;generic types&lt;/em&gt;.
A constructed type is when the type arguments are specified. For example,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dictionary&amp;lt;int, string&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A generic type is when the type arguments are not specified. For example,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dictionary&amp;lt;TKey, TValue&amp;gt;()
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As per the code snippet below, writing a method to swap two &lt;em&gt;Integer&lt;/em&gt; values is pretty rudimentary. But what if later we needed to do the very same but with &lt;em&gt;Strings&lt;/em&gt;. This would result in two methods, or perhaps overloads.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/13124e5ec2369117aff8fc27a3a861e5.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;Generics to the rescue. We’ve isolated the type as a form of abstraction (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;T&lt;/code&gt;) to act as a placeholder for the type we intend to use.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/9ab19f0a644a3e79525f932e4e34cd5f.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;When the method is actually called, that placeholder is replaced with the type of the values used.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/f318890ecb9849ced43bccfe86744093.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;The value of Generics here is that it grants you &lt;em&gt;productivity&lt;/em&gt; improvements, &lt;em&gt;expressiveness&lt;/em&gt; and moves some safety concerns from &lt;em&gt;execution time to compile time&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note the two ways in which the &lt;em&gt;method&lt;/em&gt; can be called. One with the type explicit, and the other implicit through &lt;em&gt;type inference&lt;/em&gt;. The compiler is inferring the &lt;em&gt;type parameters&lt;/em&gt; based on the method arguments you pass.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;generic&lt;/em&gt; is simply a placeholder for a type.&lt;/p&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><category term="programming" /><summary type="html">Generics have been around since C# 2.0 and has become a tool we leverage so naturally now in C# we almost don’t even think about it. So let’s change that…</summary></entry><entry><title type="html">C# Value and Reference Types</title><link href="https://www.danebalia.com/jekyll/update/programming/2021/09/21/csharp-generics-intro.html" rel="alternate" type="text/html" title="C# Value and Reference Types" /><published>2021-09-21T10:22:22+02:00</published><updated>2021-09-21T10:22:22+02:00</updated><id>https://www.danebalia.com/jekyll/update/programming/2021/09/21/csharp-generics-intro</id><content type="html" xml:base="https://www.danebalia.com/jekyll/update/programming/2021/09/21/csharp-generics-intro.html">&lt;p&gt;&lt;strong&gt;Value&lt;/strong&gt; and &lt;strong&gt;Reference&lt;/strong&gt; types are covered frequently all over the internet, in blog posts, technical articles and forums. Why? Because it’s easy to develop software for a long time without stopping to ‘smell the roses’. Or in this case, understand what they are and how they work. So here’s a note to self, or you.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;strong&gt;Value Type&lt;/strong&gt; is some object that is the information itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;strong&gt;Reference Type&lt;/strong&gt; is the details which points to an object containing the information. The details include things like type of object etc.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;an-analogy&quot;&gt;An Analogy:&lt;/h2&gt;

&lt;p&gt;Let’s set the table with an analogy. Kim has just written a book. It’s an auto-biography. She would like to get feedback so she prints a copy at home and gives it to her husband Kanya. Later that day she stumbles onto a publicist, who is intrigued and asks to read it. She fires up her Macbook and shares the link to the original via Google Drive.&lt;/p&gt;

&lt;p&gt;As time passes the publicist feeds back and is thoroughly impressed. She has highlighted a slew of spelling mistakes and a consideration for re-writing Chapter 4. Kim goes to work immediately and in a few days is done. Updating the original and requesting that the publicist review her changes.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;So what’s this got to do with value and reference types?&lt;/strong&gt;
Well, when Kim made Kanya a physical copy of the original. She provided him with an independent version of the truth. In fact after all her changes during her engagement with the publicist, Kanya’s copy has now become outdated and obsolete. He had a &lt;strong&gt;value type&lt;/strong&gt;. An independent copy of the source, that was detached and indifferent to modifications of the source.&lt;/p&gt;

&lt;p&gt;The publicist on the other hand, well she had a Google Drive URL, a &lt;strong&gt;reference&lt;/strong&gt; to the original. In fact as Kim made changes the publicist could see those changes in real time. The &lt;strong&gt;reference&lt;/strong&gt; provided access to the original but was not the original.&lt;/p&gt;

&lt;h2 id=&quot;some-examples&quot;&gt;Some Examples&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Array types are reference types, even if the element type is a value type (so int[] is still a reference type, even though &lt;strong&gt;int&lt;/strong&gt; is a value type)&lt;/li&gt;
  &lt;li&gt;Enumerations are value types.&lt;/li&gt;
  &lt;li&gt;Delegates are reference types.&lt;/li&gt;
  &lt;li&gt;Interfaces are reference types, but they can be implemented as values.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;stack-vs-heap&quot;&gt;Stack vs Heap&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;References types live on the Heap.
Value types lives where their declared.
Local variables and method parameters live on the Stack.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;strong&gt;Stack&lt;/strong&gt; is a simple FIFO memory structure. When a method is invoked, the CLR bookmarks the top of the stack. The method then pushes data onto the stack as it executes. When the method completes the CLR just resets the stack to it’s previous bookmark.&lt;/p&gt;

&lt;h3 id=&quot;stack-offers&quot;&gt;Stack offers:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;very fast access&lt;/li&gt;
  &lt;li&gt;space is managed efficiently by CPU, memory will not be fragmented&lt;/li&gt;
  &lt;li&gt;local variables only&lt;/li&gt;
  &lt;li&gt;limit on memory size&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A &lt;strong&gt;Heap&lt;/strong&gt; is a random jumble of objects not managed by automatically for you. It is a free-floating region of memory (and is larger). In multi-threaded applications each thread will have its own stack. But all the different threads will share the heap.&lt;/p&gt;

&lt;h3 id=&quot;heap-offers&quot;&gt;Heap Offers:&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;variables can be accessed globally&lt;/li&gt;
  &lt;li&gt;no limit on memory size&lt;/li&gt;
  &lt;li&gt;(relatively) slower access&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It’s critical to note, that a value type lives where it’s declared, so if you have a class with an instance variable of float, a value type. It will live wherever the rest of the object is found and that is on the heap.&lt;/p&gt;

&lt;p&gt;A last point, is that a string in C# is a reference type. Why? Because strings can be grow quite large in size and thus have to stored on the heap.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://vegibit.com/reference-types-and-value-types-in-c/&quot;&gt;Reference Types and Value Types in C - Vegitbit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://csharpindepth.com/&quot;&gt;C# In Depth - Jon Skeet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.albahari.com/valuevsreftypes.aspx&quot;&gt;Values vs Reference Types - Joseph Albahari&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.programmerinterview.com/data-structures/difference-between-stack-and-heap/&quot;&gt;Difference between Stack and Heap&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><category term="jekyll" /><category term="update" /><category term="programming" /><summary type="html">Value and Reference types are covered frequently all over the internet, in blog posts, technical articles and forums. Why? Because it’s easy to develop software for a long time without stopping to ‘smell the roses’. Or in this case, understand what they are and how they work. So here’s a note to self, or you.</summary></entry></feed>